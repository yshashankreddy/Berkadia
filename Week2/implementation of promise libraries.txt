						Blue bird:
						----------
Bluebird is built with the following design principles in mind:

Pragmatic and not theoretical:
 Bluebird will always pick the pragmatic route vs the theoretically elegant one when there is a conflict. The library's API was created based on real-life use cases and after a lot of consideration.

Fully featured without bloat:
 Bluebird provides all the tools and utilities needed to realize a highly expressive and fluent DSL for asynchronous JavaScript without suffering from bloat by avoiding incorporating features that are solely motivated by theoretical arguments, have extremely narrow applicability, or have limited synergy and composability with existing features.

Easy to debug: A major consequence of choosing pragmatism over theoretical elegance, a property that is unique to bluebird among promise libraries taken to this extent.
Bluebird ships with the best cross-platform long stack traces out there and a warning system. This helps you recognize common and devastating promise usage mistakes early before they lead to hard to debug code later.
Unhandled errors are not silently swallowed by default but reported along with helpful stack traces where applicable. All of this is of course configurable.

Zero overhead abstraction :
 In server-side applications the performance of a promise implementation matters. Bluebird's server-side performance is measured with highly relevant and realistic end-to-end macro benchmarks, and consistently comes out on top. We understand that if bluebird is as close to a zero cost abstraction as possible, developers won't be tempted to short-circuit and absorb complexity themselves.
Runs everywhere - Bluebird runs on pretty much every platform. This makes bluebird ideal for projects who care about providing consistent cross-platform and cross-version experience. It runs on old IE, it has even been known to run on Netscape 7.

Spec compatible :
 Bluebird can work as a drop-in replacement for native promises for an instant performance boost. It passes the Promises/A+ test suite and is fully spec compliant.


Installation:
in Node.js
npm install bluebird
Then:
var Promise = require("bluebird");

Alternatively in ES6
import * as Promise from 'bluebird';

there are few methods in promise:
promisify:
    ->returns a new function that returns a promise instead of using a function.
    ->used on an error-first callback function.
   
ex:
  var Promise=require('bluebird');
  var promisereadfile=Promise.promisify(require("fs").readFile);
  promisereadfile("a.js","utf8")
  .then(function(fileText){
     console.log(fileText);
   }).catch(function(err){
    console.log("error reading file",err);
})
});
 there are other methods like 
   promisifyall:
    ->provides a promisified version of all callback functions in a library.
    ->gives a "someFunctionAsync" function to be used as a promise.   
 Bind:
  ->creates a promise that is bound to a specific "this"
  All:
  -> takes an array of promises which it starts executing at the same time.
   Join:
   -> very similar to Promise.All,but for a set number of promises.
    ->takes the promises themselves,not an array
    ->more performant.


						Q promise library:
						------------------
$q service helps in asynchronous execution of functions by returning a “promise” from the function call.

The deferred object exposes the Promise instance and its APIs which are to be used for resolving the promise. A new instance of deferred is constructed by calling $q.defer(). It exposes three methods:

resolve: resolves a promise with a value.
reject: rejects a promise with a reason.
notify: provides status updates.
 
var deferred = $q.defer();
// To fulfil a promise,we use .resolve
deferred.resolve(data);
// To reject a promise,we  use .reject
deferred.reject(error);
						Example:		
						-------
var Q = require('q');
 
var deferred = Q.defer();
var promise = deferred.promise;
 
promise.then(function (val) {
   console.log('Got : '+val);
});

promise.catch(function(err){
   console.error("Error : "+err)
})
 
//deferred.resolve('Awesome');
deferred.reject('Something bad happened');


						jQuery Promise:		
						----------------
->We will use a this promise when we need to run many deferred tasks asynchronously. $.when( ) takes specific  type of arguments which is jQuery deferred object.
->$.when() takes more than one promise in its arguements.
 
ex:
 function showDialogBox () {
	var ret = $.Deferred();
	/*
	the function does something useful
	and then at some point you decide
	it has finished:
	*/
	ret.resolve();
	return ret;
}
 
var s = showDialogBox();
 
$.when(s).then(function() {
	//do something after showDialogBox has done its job
}); 


->The return value of the showDialogBox is a Deferred() object that will lock the when() until resolve() is called. 

						ES6 promise polyfill:
						---------------------
Installation:
------------
Node.js
To install:

npm install es6-promise-polyfill
To use:

var Promise = require('es6-promise-polyfill').Promise;
var promise = new Promise(...);